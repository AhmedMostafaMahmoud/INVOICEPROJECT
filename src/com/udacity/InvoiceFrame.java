/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.udacity;

import com.udacity.model.InvoiceHeadline;
import com.udacity.model.InvoiceHeaderTableModel;
import com.udacity.model.InvLine;
import com.udacity.model.InvLinesTableModel;
import com.udacity.view.HeaderDialogofinvoice;
import com.udacity.view.LineDialogInvoice;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author DELL
 */
public class InvoiceFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * New form invoice frame creation
     */
    public InvoiceFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tableinvocies = new javax.swing.JTable();
        Tableinvocies.getSelectionModel().addListSelectionListener(this);
        invoicebuttoncreation = new javax.swing.JButton();
        invoicebuttoncreation.addActionListener(this);
        EraseInvoiceButton = new javax.swing.JButton();
        EraseInvoiceButton.addActionListener(this);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        customerNameTF = new javax.swing.JTextField();
        DateInvoiceTF = new javax.swing.JTextField();
        invoiceNumerLbl = new javax.swing.JLabel();
        invTotalLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceLinesTable = new javax.swing.JTable();
        LineButtonCreation = new javax.swing.JButton();
        LineButtonCreation.addActionListener(this);
        lineButtonErase = new javax.swing.JButton();
        lineButtonErase.addActionListener(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuItemLoading = new javax.swing.JMenuItem();
        MenuItemLoading.addActionListener(this);
        MenuItemSaving = new javax.swing.JMenuItem();
        MenuItemSaving.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Tableinvocies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Tableinvocies);

        invoicebuttoncreation.setText("Create New Invoice");
        invoicebuttoncreation.setActionCommand("CreateNewInvoice");

        EraseInvoiceButton.setText("Delete Invoice");
        EraseInvoiceButton.setActionCommand("DeleteInvoice");

        jLabel1.setText("Invoice Number");

        jLabel2.setText("Invoide Date");

        jLabel3.setText("Customer name");

        jLabel4.setText("Invoice Total");

        invoiceLinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(invoiceLinesTable);

        LineButtonCreation.setText("Create New Line");
        LineButtonCreation.setActionCommand("CreateNewLine");

        lineButtonErase.setText("Delete Line");
        lineButtonErase.setActionCommand("DeleteLine");

        jMenu1.setText("File");

        MenuItemLoading.setText("Load File");
        MenuItemLoading.setActionCommand("LoadFile");
        jMenu1.add(MenuItemLoading);

        MenuItemSaving.setText("Save File");
        MenuItemSaving.setActionCommand("SaveFile");
        jMenu1.add(MenuItemSaving);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerNameTF)
                                            .addComponent(DateInvoiceTF)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(invoiceNumerLbl)
                                                    .addComponent(invTotalLbl))
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(LineButtonCreation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lineButtonErase)
                                .addGap(113, 113, 113))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(invoicebuttoncreation)
                        .addGap(87, 87, 87)
                        .addComponent(EraseInvoiceButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(invoiceNumerLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(DateInvoiceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(customerNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(invTotalLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LineButtonCreation)
                            .addComponent(lineButtonErase))
                        .addGap(44, 44, 44)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EraseInvoiceButton)
                    .addComponent(invoicebuttoncreation))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DateInvoiceTF;
    private javax.swing.JButton EraseInvoiceButton;
    private javax.swing.JButton LineButtonCreation;
    private javax.swing.JMenuItem MenuItemLoading;
    private javax.swing.JMenuItem MenuItemSaving;
    private javax.swing.JTable Tableinvocies;
    private javax.swing.JTextField customerNameTF;
    private javax.swing.JLabel invTotalLbl;
    private javax.swing.JTable invoiceLinesTable;
    private javax.swing.JLabel invoiceNumerLbl;
    private javax.swing.JButton invoicebuttoncreation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton lineButtonErase;
    // End of variables declaration//GEN-END:variables
    private DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
    private List<InvoiceHeadline> invoicesList = new ArrayList<>();
    private InvoiceHeaderTableModel invoiceHeaderTableModel;
    private InvLinesTableModel invoiceLinesTableModel;
    private HeaderDialogofinvoice headerDialog;
    private LineDialogInvoice lineDialog;

    @Override
    public void actionPerformed(ActionEvent e) {

        switch (e.getActionCommand()) {
            case "CreateNewInvoice":
                showNewInvoiceDialog();
                break;
            case "DeleteInvoice":
                eraseInvoice();
                break;
            case "CreateNewLine":
                showNewLineDialog();
                break;
            case "DeleteLine":
                EraseLine();
                break;
            case "LoadFile":
                loadFile();
                break;
            case "SaveFile":
                saveData();
                break;
            case "createInvCancel":
                InvoiceCancelCreation();
                break;
            case "createInvOK":
                InvoiceOKcreation();
                break;
            case "createLineCancel":
                LineCancelCreation();
                break;
            case "createLineOK":
                createLineOK();
                break;
        }
    }

    private void loadFile() {
        JOptionPane.showMessageDialog(this, "Please, select header file!", "Attension", JOptionPane.WARNING_MESSAGE);
        JFileChooser openFile = new JFileChooser();
        int result = openFile.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File headerFile = openFile.getSelectedFile();
            try {
                FileReader headerFr = new FileReader(headerFile);
                BufferedReader headerBr = new BufferedReader(headerFr);
                String headerLine = null;

                while ((headerLine = headerBr.readLine()) != null) {
                    String[] headerParts = headerLine.split(",");
                    String invNumStr = headerParts[0];
                    String invDateStr = headerParts[1];
                    String custName = headerParts[2];

                    int invNum = Integer.parseInt(invNumStr);
                    Date invDate = df.parse(invDateStr);

                    InvoiceHeadline inv = new InvoiceHeadline(invNum, custName, invDate);
                    invoicesList.add(inv);
                }

                JOptionPane.showMessageDialog(this, "Please, select lines file!", "Attension", JOptionPane.WARNING_MESSAGE);
                result = openFile.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File linesFile = openFile.getSelectedFile();
                    BufferedReader linesBr = new BufferedReader(new FileReader(linesFile));
                    String linesLine = null;
                    while ((linesLine = linesBr.readLine()) != null) {
                        String[] lineParts = linesLine.split(",");
                        String invNumStr = lineParts[0];
                        String itemName = lineParts[1];
                        String itemPriceStr = lineParts[2];
                        String itemCountStr = lineParts[3];

                        int invNum = Integer.parseInt(invNumStr);
                        double itemPrice = Double.parseDouble(itemPriceStr);
                        int itemCount = Integer.parseInt(itemCountStr);
                        InvoiceHeadline header = findInvoiceByNum(invNum);
                        InvLine invLine = new InvLine(itemName, itemPrice, itemCount, header);
                        header.getLines().add(invLine);
                    }
                    invoiceHeaderTableModel = new InvoiceHeaderTableModel(invoicesList);
                    Tableinvocies.setModel(invoiceHeaderTableModel);
                    Tableinvocies.validate();
                }
                System.out.println("Check");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        showInvoices();
    }

    private void saveData() {
        String headers = "";
        String lines = "";
        for (InvoiceHeadline header : invoicesList) {
            headers += header.getDataAsCSV();
            headers += "\n";
            for (InvLine line : header.getLines()) {
                lines += line.DataAsCSVgetting();
                lines += "\n";
            }
        }
        JOptionPane.showMessageDialog(this, "Please, select file to save header data!", "Attension", JOptionPane.WARNING_MESSAGE);
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File headerFile = fileChooser.getSelectedFile();
            try {
                FileWriter hFW = new FileWriter(headerFile);
                hFW.write(headers);
                hFW.flush();
                hFW.close();

                JOptionPane.showMessageDialog(this, "Please, select file to save lines data!", "Attension", JOptionPane.WARNING_MESSAGE);
                result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File linesFile = fileChooser.getSelectedFile();
                    FileWriter lFW = new FileWriter(linesFile);
                    lFW.write(lines);
                    lFW.flush();
                    lFW.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private InvoiceHeadline findInvoiceByNum(int invNum) {
        InvoiceHeadline header = null;
        for (InvoiceHeadline inv : invoicesList) {
            if (invNum == inv.getinvoicenumber()) {
                header = inv;
                break;
            }
        }
        return header;
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        System.out.println("Invoice Selected!");
        invoicesTableRowSelected();
    }

    private void invoicesTableRowSelected() {
        int selectedRowIndex = Tableinvocies.getSelectedRow();
        if (selectedRowIndex >= 0) {
            InvoiceHeadline row = invoiceHeaderTableModel.getInvoicesList().get(selectedRowIndex);
            customerNameTF.setText(row.CustomerNameReq());
            DateInvoiceTF.setText(df.format(row.invoicedate()));
            invoiceNumerLbl.setText("" + row.getinvoicenumber());
            invTotalLbl.setText("" + row.totalinvoice());
            ArrayList<InvLine> lines = row.getLines();
            invoiceLinesTableModel = new InvLinesTableModel(lines);
            invoiceLinesTable.setModel(invoiceLinesTableModel);
            invoiceLinesTableModel.fireTableDataChanged();
        }
    }

   

    private void showNewLineDialog() {
        lineDialog = new LineDialogInvoice(this);
        lineDialog.setVisible(true);
    }
     private void showNewInvoiceDialog() {
        headerDialog = new HeaderDialogofinvoice(this);
        headerDialog.setVisible(true);
    }

    private void InvoiceCancelCreation() {
        headerDialog.setVisible(false);
        headerDialog.dispose();
        headerDialog = null;
    }

    private void InvoiceOKcreation() {
        String custName = headerDialog.CustomerNameFieldgetting().getText();
        String invDateStr = headerDialog.InvoiceDateFieldgetting().getText();
        headerDialog.setVisible(false);
        headerDialog.dispose();
        headerDialog = null;
        try {
            Date invDate = df.parse(invDateStr);
            int invNum = NextInvoiceNumber();
            InvoiceHeadline invoiceHeader = new InvoiceHeadline(invNum, custName, invDate);
            invoicesList.add(invoiceHeader);
            invoiceHeaderTableModel.fireTableDataChanged();
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        showInvoices();
    }

    private int NextInvoiceNumber() {
        int max = 0;
        for (InvoiceHeadline header : invoicesList) {
            if (header.getinvoicenumber() > max) {
                max = header.getinvoicenumber();
            }
        }
        return max + 1;
    }

    private void LineCancelCreation() {
        lineDialog.setVisible(false);
        lineDialog.dispose();
        lineDialog = null;
    }

  

    private void eraseInvoice() {
        int invIndex = Tableinvocies.getSelectedRow();
        InvoiceHeadline header = invoiceHeaderTableModel.getInvoicesList().get(invIndex);
        invoiceHeaderTableModel.getInvoicesList().remove(invIndex);
        invoiceHeaderTableModel.fireTableDataChanged();
        invoiceLinesTableModel = new InvLinesTableModel(new ArrayList<InvLine>());
        invoiceLinesTable.setModel(invoiceLinesTableModel);
        invoiceLinesTableModel.fireTableDataChanged();
        customerNameTF.setText("");
        DateInvoiceTF.setText("");
        invoiceNumerLbl.setText("");
        invTotalLbl.setText("");
        showInvoices();
    }

    
  private void createLineOK() {
        String itemName = lineDialog.ItemNameFieldgetting().getText();
        String itemCountStr = lineDialog.ItemCountFieldgetting().getText();
        String itemPriceStr = lineDialog.ItemPriceFieldgetting().getText();
        lineDialog.setVisible(false);
        lineDialog.dispose();
        lineDialog = null;
        int itemCount = Integer.parseInt(itemCountStr);
        double itemPrice = Double.parseDouble(itemPriceStr);
        int headerIndex = Tableinvocies.getSelectedRow();
        InvoiceHeadline invoice = invoiceHeaderTableModel.getInvoicesList().get(headerIndex);

        InvLine invoiceLine = new InvLine(itemName, itemPrice, itemCount, invoice);
        invoice.addInvoiceLine(invoiceLine);
        invoiceLinesTableModel.fireTableDataChanged();
        invoiceHeaderTableModel.fireTableDataChanged();
        invTotalLbl.setText("" + invoice.totalinvoice());
        showInvoices();
    }
  
    private void showInvoices() {
        System.out.println("***************************");
        for (InvoiceHeadline header : invoicesList) {
            System.out.println(header);
        }
        System.out.println("***************************");
    }
private void EraseLine() {
        int lineIndex = invoiceLinesTable.getSelectedRow();
        InvLine line = invoiceLinesTableModel.getInvoiceLines().get(lineIndex);
        invoiceLinesTableModel.getInvoiceLines().remove(lineIndex);
        invoiceLinesTableModel.fireTableDataChanged();
        invoiceHeaderTableModel.fireTableDataChanged();
        invTotalLbl.setText("" + line.getHeader().totalinvoice());
        showInvoices();
    }
}
